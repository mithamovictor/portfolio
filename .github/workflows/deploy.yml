name: Deploy portfolio website

on:
  push:
    branches:
      - main

env:
  DEPLOY_PATH: /home/vic/${{ github.event.repository.name }}

jobs:
  security-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: ‚ö° Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: üì¶ Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.11.1

      - name: Install dependencies
        run: pnpm install

      - name: üîí Run pnpm audit
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
             echo "Main branch: auditing only, not failing on vulnerabilities"
             pnpm audit --audit-level=high || true
          else
             echo "Other branches: failing on high+ vulnerabilities"
             pnpm audit --audit-level=high
          fi

      - name: üîç Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: "p/ci"

  deploy:
    needs: security-checks
    runs-on: ubuntu-latest
    steps:
      - name: üöÄ Checkout (for metadata)
        uses: actions/checkout@v4

      - name: üîë Setup SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: üì° Add server to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.TARGET_SERVER_HOST }} >> ~/.ssh/known_hosts

      # --- Stage: clone ---
      - name: üîÑ Clone project on server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.TARGET_SERVER_USER }}@${{ secrets.TARGET_SERVER_HOST }} "
            if [ ! -d '$DEPLOY_PATH/.git' ]; then
              echo 'üìÇ Project not found. Cloning...'
              mkdir -p '$DEPLOY_PATH'
              git clone --branch ${{ github.ref_name }} git@github.com:${{ github.repository }}.git '$DEPLOY_PATH'
            else
              echo '‚úÖ Project already exists. Fetching latest...'
              cd '$DEPLOY_PATH'
              git fetch origin
            fi
          "

      # --- Stage: setup ---
      - name: üõ† Setup project on server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.TARGET_SERVER_USER }}@${{ secrets.TARGET_SERVER_HOST }} "
            cd '$DEPLOY_PATH'
            git checkout -B ${{ github.ref_name }} origin/${{ github.ref_name }}
            git pull origin ${{ github.ref_name }}
          "

      # --- Stage: build & deploy ---
      - name: üöÄ Build and Deploy with PM2
        run: |
          BRANCH=${{ github.ref_name }}
          FRONTEND_PORT=3003
          PROJECT_NAME=${{ github.event.repository.name }}

          ssh -o StrictHostKeyChecking=no ${{ secrets.TARGET_SERVER_USER }}@${{ secrets.TARGET_SERVER_HOST }} "
            set -e
            cd '$DEPLOY_PATH'

            echo 'üõ† Installing dependencies...'
            pnpm install

            echo 'üîß Preparing environment...'
            cp .env.example .env

            export CI_PROJECT_NAME='${PROJECT_NAME}'
            export CI_COMMIT_BRANCH=${BRANCH}
            export FRONTEND_PORT=${FRONTEND_PORT}
            export BREVO_API_KEY_PORTFOLIO='${{ secrets.BREVO_API_KEY_PORTFOLIO }}'
            export DEV_TO_API_KEY_PORTFOLIO='${{ secrets.DEV_TO_API_KEY_PORTFOLIO }}'

            # Replace env placeholders with real values
            envsubst < .env > .env.tmp && mv .env.tmp .env

            echo 'üèó Building project...'
            pnpm build

            echo 'üöÄ Starting app with PM2...'
            pm2 stop \"\$CI_PROJECT_NAME-\$CI_COMMIT_BRANCH\" || true
            pm2 delete \"\$CI_PROJECT_NAME-\$CI_COMMIT_BRANCH\" || true

            pm2 start pnpm --name \"\$CI_PROJECT_NAME-\$CI_COMMIT_BRANCH\" -- start -p \$FRONTEND_PORT
            pm2 save
          "
