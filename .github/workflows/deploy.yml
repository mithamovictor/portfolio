name: Deploy Mediloop frontend app

on:
  push:
    branches: [ main ]

env:
  DEPLOY_PATH: /home/vic/mediloop/${{ github.ref_name }}/${{ github.event.repository.name }}

jobs:
  security-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: ‚ö° Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: üì¶ Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.16.0

      - name: Install dependencies
        run: pnpm install

      - name: üîí Run pnpm audit
        run: |
          if [[ "${{ github.ref_name }}" == "dev" ]]; then
            echo "Dev branch: auditing only, not failing on vulnerabilities"
            pnpm audit --audit-level=high || true
          else
            echo "Prod/UAT branch: failing on high+ vulnerabilities"
            pnpm audit --audit-level=high
          fi

      - name: üîç Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: "p/ci"

  deploy:
    needs: security-checks
    runs-on: ubuntu-latest
    concurrency:
      group: deploy-${{ github.ref }}
      cancel-in-progress: false

    steps:
      - name: üöÄ Checkout
        uses: actions/checkout@v4

      - name: üîë SSH agent (runner ‚Üí server)
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: üîÑ Clone or update project on server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.TARGET_SERVER_USER }}@${{ secrets.TARGET_SERVER_HOST }} "
            if [ ! -d '$DEPLOY_PATH/.git' ]; then
              echo 'üìÇ Project not found. Cloning...';
              mkdir -p '$DEPLOY_PATH';
              GIT_SSH_COMMAND='ssh -i ~/.ssh/id_rsa -o IdentitiesOnly=yes' \
              git clone --branch ${{ github.ref_name }} git@github.com:${{ github.repository }}.git '$DEPLOY_PATH';
            else
              echo '‚úÖ Project exists. Fetching latest...';
              cd '$DEPLOY_PATH';
              GIT_SSH_COMMAND='ssh -i ~/.ssh/id_rsa -o IdentitiesOnly=yes' \
              git fetch origin;
            fi
          "

      - name: üõ† Setup project (env)
        run: |
          BRANCH=${{ github.ref_name }}
          FRONTEND_PORT=3003
          PROJECT_NAME=${{ github.event.repository.name }}

          ssh -o StrictHostKeyChecking=no ${{ secrets.TARGET_SERVER_USER }}@${{ secrets.TARGET_SERVER_HOST }} "
            set -e
            cd '$DEPLOY_PATH'

            # Always reset to clean state before templating
            git checkout -B ${{ github.ref_name }} origin/${{ github.ref_name }}
            git pull origin ${{ github.ref_name }}

            cp .env.example .env

            export FRONTEND_PORT=${FRONTEND_PORT}
            export BREVO_API_KEY_PORTFOLIO='${{ secrets.BREVO_API_KEY_PORTFOLIO }}'
            export DEV_TO_API_KEY_PORTFOLIO='${{ secrets.DEV_TO_API_KEY_PORTFOLIO }}'
            export APP_NAME='${PROJECT_NAME}-${BRANCH}'

            # Replace env vars *after* repo is clean
            envsubst < .env > .env.tmp && mv .env.tmp .env

            pnpm install
            pnpm build

            echo 'üõë Stopping existing containers for $APP_NAME...'
            docker stop \$APP_NAME || true
            docker rm -f \$APP_NAME || true
            docker system prune -f

            echo 'üèóÔ∏è Building fresh images...'
            docker build -t \$APP_NAME .

            echo 'üöÄ Starting stack...'
            docker run -d --name \$APP_NAME --restart always \
              -p \$FRONTEND_PORT:3000 \
              -e NODE_ENV=\$NEXT_PUBLIC_NODE_ENV \
              -e NEXT_PUBLIC_NODE_ENV=\$NEXT_PUBLIC_NODE_ENV \
              -e NEXT_PUBLIC_API_BASE_URL=\$NEXT_PUBLIC_API_BASE_URL \
              -e NEXT_PUBLIC_TOKEN_REFRESH_INTERVAL=\$NEXT_PUBLIC_TOKEN_REFRESH_INTERVAL \
              \$APP_NAME
          "
